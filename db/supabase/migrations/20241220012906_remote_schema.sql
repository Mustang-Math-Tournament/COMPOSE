create extension if not exists "pg_net" with schema "public" version '0.10.0';

create extension if not exists "vector" with schema "public" version '0.7.4';

create sequence "public"."problem_subtopics_id_seq";

drop policy "Admins can do anything" on "public"."problems";

drop policy "Problem Writers can insert anything" on "public"."problems";

drop policy "Problem Writers can select anything" on "public"."problems";

drop policy "Problem Writers can update anything" on "public"."problems";

create table "public"."problem_subtopics" (
    "id" integer not null default nextval('problem_subtopics_id_seq'::regclass),
    "problem_topic_id" integer not null,
    "subtopic_id" integer not null
);


create table "public"."subtopics" (
    "id" bigint generated by default as identity not null,
    "subtopic" text not null,
    "subtopic_short" text,
    "topic_id" bigint
);


alter table "public"."subtopics" enable row level security;

create table "public"."types" (
    "id" bigint generated by default as identity not null,
    "type" text,
    "type_short" text
);


alter table "public"."types" enable row level security;

alter table "public"."problems" add column "diffs" jsonb[];

alter table "public"."problems" add column "embedding" vector(1536);

alter sequence "public"."problem_subtopics_id_seq" owned by "public"."problem_subtopics"."id";

CREATE UNIQUE INDEX problem_subtopics_pkey ON public.problem_subtopics USING btree (id);

CREATE UNIQUE INDEX problem_subtopics_problem_topic_id_subtopic_id_key ON public.problem_subtopics USING btree (problem_topic_id, subtopic_id);

CREATE UNIQUE INDEX subtopics_pkey ON public.subtopics USING btree (id);

CREATE UNIQUE INDEX types_pkey ON public.types USING btree (id);

alter table "public"."problem_subtopics" add constraint "problem_subtopics_pkey" PRIMARY KEY using index "problem_subtopics_pkey";

alter table "public"."subtopics" add constraint "subtopics_pkey" PRIMARY KEY using index "subtopics_pkey";

alter table "public"."types" add constraint "types_pkey" PRIMARY KEY using index "types_pkey";

alter table "public"."problem_subtopics" add constraint "problem_subtopics_problem_topic_id_fkey" FOREIGN KEY (problem_topic_id) REFERENCES problem_topics(id) not valid;

alter table "public"."problem_subtopics" validate constraint "problem_subtopics_problem_topic_id_fkey";

alter table "public"."problem_subtopics" add constraint "problem_subtopics_problem_topic_id_subtopic_id_key" UNIQUE using index "problem_subtopics_problem_topic_id_subtopic_id_key";

alter table "public"."problem_subtopics" add constraint "problem_subtopics_subtopic_id_fkey" FOREIGN KEY (subtopic_id) REFERENCES subtopics(id) not valid;

alter table "public"."problem_subtopics" validate constraint "problem_subtopics_subtopic_id_fkey";

alter table "public"."subtopics" add constraint "subtopics_topic_id_fkey" FOREIGN KEY (topic_id) REFERENCES global_topics(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."subtopics" validate constraint "subtopics_topic_id_fkey";

set check_function_bodies = off;

grant delete on table "public"."problem_subtopics" to "anon";

grant insert on table "public"."problem_subtopics" to "anon";

grant references on table "public"."problem_subtopics" to "anon";

grant select on table "public"."problem_subtopics" to "anon";

grant trigger on table "public"."problem_subtopics" to "anon";

grant truncate on table "public"."problem_subtopics" to "anon";

grant update on table "public"."problem_subtopics" to "anon";

grant delete on table "public"."problem_subtopics" to "authenticated";

grant insert on table "public"."problem_subtopics" to "authenticated";

grant references on table "public"."problem_subtopics" to "authenticated";

grant select on table "public"."problem_subtopics" to "authenticated";

grant trigger on table "public"."problem_subtopics" to "authenticated";

grant truncate on table "public"."problem_subtopics" to "authenticated";

grant update on table "public"."problem_subtopics" to "authenticated";

grant delete on table "public"."problem_subtopics" to "service_role";

grant insert on table "public"."problem_subtopics" to "service_role";

grant references on table "public"."problem_subtopics" to "service_role";

grant select on table "public"."problem_subtopics" to "service_role";

grant trigger on table "public"."problem_subtopics" to "service_role";

grant truncate on table "public"."problem_subtopics" to "service_role";

grant update on table "public"."problem_subtopics" to "service_role";

grant delete on table "public"."subtopics" to "anon";

grant insert on table "public"."subtopics" to "anon";

grant references on table "public"."subtopics" to "anon";

grant select on table "public"."subtopics" to "anon";

grant trigger on table "public"."subtopics" to "anon";

grant truncate on table "public"."subtopics" to "anon";

grant update on table "public"."subtopics" to "anon";

grant delete on table "public"."subtopics" to "authenticated";

grant insert on table "public"."subtopics" to "authenticated";

grant references on table "public"."subtopics" to "authenticated";

grant select on table "public"."subtopics" to "authenticated";

grant trigger on table "public"."subtopics" to "authenticated";

grant truncate on table "public"."subtopics" to "authenticated";

grant update on table "public"."subtopics" to "authenticated";

grant delete on table "public"."subtopics" to "service_role";

grant insert on table "public"."subtopics" to "service_role";

grant references on table "public"."subtopics" to "service_role";

grant select on table "public"."subtopics" to "service_role";

grant trigger on table "public"."subtopics" to "service_role";

grant truncate on table "public"."subtopics" to "service_role";

grant update on table "public"."subtopics" to "service_role";

grant delete on table "public"."types" to "anon";

grant insert on table "public"."types" to "anon";

grant references on table "public"."types" to "anon";

grant select on table "public"."types" to "anon";

grant trigger on table "public"."types" to "anon";

grant truncate on table "public"."types" to "anon";

grant update on table "public"."types" to "anon";

grant delete on table "public"."types" to "authenticated";

grant insert on table "public"."types" to "authenticated";

grant references on table "public"."types" to "authenticated";

grant select on table "public"."types" to "authenticated";

grant trigger on table "public"."types" to "authenticated";

grant truncate on table "public"."types" to "authenticated";

grant update on table "public"."types" to "authenticated";

grant delete on table "public"."types" to "service_role";

grant insert on table "public"."types" to "service_role";

grant references on table "public"."types" to "service_role";

grant select on table "public"."types" to "service_role";

grant trigger on table "public"."types" to "service_role";

grant truncate on table "public"."types" to "service_role";

grant update on table "public"."types" to "service_role";

create policy "Admins can do anything but other's drafts"
on "public"."problems"
as permissive
for all
to public
using (((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 40) AND ((status <> 'Draft'::problem_status) OR (author_id = auth.uid()))))
with check (((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 40) AND ((status <> 'Draft'::problem_status) OR (author_id = auth.uid()))));


create policy "Problem Writers can insert their own problems"
on "public"."problems"
as permissive
for insert
to public
with check (((auth.uid() = author_id) AND (( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 30)));


create policy "Problem Writers can select anything but other's drafts"
on "public"."problems"
as permissive
for select
to public
using (((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 30) AND ((status <> 'Draft'::problem_status) OR (author_id = auth.uid()))));


create policy "Problem Writers can update anything but other's drafts"
on "public"."problems"
as permissive
for update
to public
using (((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 30) AND ((status <> 'Draft'::problem_status) OR (author_id = auth.uid()))))
with check (((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 30) AND ((status <> 'Draft'::problem_status) OR (author_id = auth.uid()))));


create policy "Admins can do anything"
on "public"."subtopics"
as permissive
for all
to public
using ((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 40))
with check ((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 40));


create policy "Problem Contributors can Select"
on "public"."subtopics"
as permissive
for select
to public
using ((( SELECT user_roles.role
   FROM user_roles
  WHERE (user_roles.user_id = auth.uid())) >= 20));



